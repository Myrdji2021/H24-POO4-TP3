# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- none

pool:
  vmImage: ubuntu-latest

variables:
  serviceConnection: 'sc-azure'
  resourceGroupNameDev: 'rg-tp3-deploy-dev'
  resourceGroupNameProd: 'rg-tp3-deply-prod'
  location: 'canadacentral'
  templateFile: 'bicep/main.bicep' # Chemin relatif exact
  sku: 'F1' # Plan tarifaire gratuit
  sqlAdminLogin: 'adminuser'
  sqlAdminPassword: 'P@ssw0rd123!' 
  storageNameDev: 'devstorage01'
  storageNameProd: 'prodstorage01tp3' 
  sqlServerNameDev: 'devsqlserver'
  sqlServerNameProd: 'prodsqlserver'

stages:
- stage: Deploy_APIs_Dev
  displayName: 'Déployer les API en Dev'
  jobs:
  - job: Deploy_API_1_Dev
    displayName: 'Déployer API 1 en Dev'
    steps:
    - script: |
        ls -R $(Build.SourcesDirectory)
      displayName: 'Afficher la structure du répertoire'
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group create --resource-group $(resourceGroupNameDev) --template-file $(templateFile) --parameters location=$(location) spName='api1-dev' spSku=$(sku) sqlAdminLogin=$(sqlAdminLogin) sqlAdminPassword=$(sqlAdminPassword) storageName=$(storageNameDev) sqlServerName=$(sqlServerNameDev)
      displayName: 'Déployer API 1'

  - job: Deploy_API_2_Dev
    displayName: 'Déployer API 2 en Dev'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group create --resource-group $(resourceGroupNameDev) --template-file $(templateFile) --parameters location=$(location) spName='api2-dev' spSku=$(sku) sqlAdminLogin=$(sqlAdminLogin) sqlAdminPassword=$(sqlAdminPassword) storageName=$(storageNameDev) sqlServerName=$(sqlServerNameDev)
      displayName: 'Déployer API 2'

- stage: Deploy_MVC_Dev
  displayName: 'Déployer l\'application MVC en Dev'
  dependsOn: Deploy_APIs_Dev
  condition: succeeded()
  jobs:
  - job: Deploy_MVC_Dev
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group create --resource-group $(resourceGroupNameDev) --template-file $(templateFile) --parameters location=$(location) spName='mvc-dev' spSku=$(sku) sqlAdminLogin=$(sqlAdminLogin) sqlAdminPassword=$(sqlAdminPassword) storageName=$(storageNameDev) sqlServerName=$(sqlServerNameDev)
      displayName: 'Déployer l\'application MVC'

- stage: Deploy_APIs_Prod
  displayName: 'Déployer les API en Production'
  dependsOn: Deploy_MVC_Dev
  condition: succeeded()
  jobs:
  - deployment: Deploy_APIs_Prod
    environment: 'Production' # Environnement avec approbation
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az deployment group create --resource-group $(resourceGroupNameProd) --template-file $(templateFile) --parameters location=$(location) spName='api1-prod' spSku=$(sku) sqlAdminLogin=$(sqlAdminLogin) sqlAdminPassword=$(sqlAdminPassword) storageName=$(storageNameProd) sqlServerName=$(sqlServerNameProd)
            displayName: 'Déployer API 1 en Production'

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az deployment group create --resource-group $(resourceGroupNameProd) --template-file $(templateFile) --parameters location=$(location) spName='api2-prod' spSku=$(sku) sqlAdminLogin=$(sqlAdminLogin) sqlAdminPassword=$(sqlAdminPassword) storageName=$(storageNameProd) sqlServerName=$(sqlServerNameProd)
            displayName: 'Déployer API 2 en Production'

- stage: Deploy_MVC_Prod
  displayName: 'Déployer l\'application MVC en Production'
  dependsOn: Deploy_APIs_Prod
  condition: succeeded()
  jobs:
  - deployment: Deploy_MVC_Prod
    environment: 'Production' # Environnement avec approbation
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az deployment group create --resource-group $(resourceGroupNameProd) --template-file $(templateFile) --parameters location=$(location) spName='mvc-prod' spSku=$(sku) sqlAdminLogin=$(sqlAdminLogin) sqlAdminPassword=$(sqlAdminPassword) storageName=$(storageNameProd) sqlServerName=$(sqlServerNameProd)
            displayName: 'Déployer l\'application MVC en Production'